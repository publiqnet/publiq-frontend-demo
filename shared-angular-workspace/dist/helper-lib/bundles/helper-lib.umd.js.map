{"version":3,"file":"helper-lib.umd.js","sources":["ng://helper-lib/lib/helper-lib.service.ts","ng://helper-lib/lib/helper-lib.component.ts","ng://helper-lib/lib/services/http-helper.service.ts","ng://helper-lib/lib/services/oauth.service.ts","ng://helper-lib/lib/services/http-observer.service.ts","ng://helper-lib/lib/helper-lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'helper-helper-lib',\n  template: `\n    <p>\n      helper-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class HelperLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport enum HttpMethodTypes {\n  get = 'get',\n  post = 'post',\n  put = 'put',\n  delete = 'delete'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpHelperService {\n\n  static baseHeaders = [];\n\n  static setBaseHeaders(headerConfigs: { headerKay: string, getHeaderValue: () => string }[]) {\n    HttpHelperService.baseHeaders = headerConfigs;\n  }\n\n  constructor(private http: HttpClient) {\n  }\n\n  public customCall(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false\n  ) {\n    return this.call(method, url, data, headers, observeResponse, false);\n  }\n\n  public call(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false,\n    useBaseHeaders: boolean = true\n  ): Observable<any> {\n    const _headers = {};\n\n    if (useBaseHeaders && HttpHelperService.baseHeaders) {\n      HttpHelperService.baseHeaders.forEach(headerConfig => {\n        if (headerConfig.getHeaderValue()) {\n          _headers[headerConfig.headerKay] = headerConfig.getHeaderValue();\n        }\n      });\n    }\n\n    if (headers) {\n      headers.forEach(headerConfig => {\n        if (headerConfig.value) {\n          _headers[headerConfig.key] = headerConfig.value;\n        }\n      });\n    }\n\n    const options = {};\n    if (_headers && Object.keys(_headers).length) {\n      const headersData = new HttpHeaders(_headers);\n      options['headers'] = headersData;\n    }\n\n    if (observeResponse) {\n      options['observe'] = 'response';\n    }\n\n    if (method === HttpMethodTypes.get || method === HttpMethodTypes.delete) {\n      return this.http[method](url, options);\n    } else {\n      return this.http[method](url, data, options);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport * as Fingerprint2 from 'fingerprintjs2';\n\nimport { KeyPair } from 'cryptography-ts';\nimport { stringToSha256 } from 'cryptography-ts/bin/utils';\nimport PubliqTransaction from 'publiq-models-ts/bin/models/PubliqTransaction';\nimport { HttpHelperService, HttpMethodTypes } from './http-helper.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthService {\n\n  static DATA_RANG: number = 60 * 60 * 1000;\n\n  public brainKey: string;\n  private url: string;\n  private randomKey: number;\n\n  public brainKeySaved: boolean;\n  public brainKeySeen: boolean;\n  public privateKeySaved: boolean;\n\n  constructor(\n    private httpHelper: HttpHelperService,\n    @Inject('oauthUrl') url: string\n  ) {\n    if (!url) {\n      throw new Error('OauthService: oauthUrl not valid');\n    }\n\n    this.url = `${url}/api/user`;\n    this.generateRandomKey();\n  }\n\n  private static getSignetString(stringToSign, brainKey) {\n    const now = new Date(new Date(stringToSign * 1000));\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: {},\n    });\n\n    return keyPair.signMessage(JSON.stringify(transactionObj.toJson()));\n  }\n\n  signupConfirmation(code: string): Observable<{ stringToSign: number }> {\n    const url = this.url + `/signup/confirmation/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n\n  }\n\n  signupComplete(stringToSign, code, password) {\n    const keyPair = new KeyPair();\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + `/signup/complete`;\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      confirmationCode: code,\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    });\n  }\n\n  signinCheckCode(code: string): Observable<any> {\n    const url = this.url + `/signin/check-code/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  authenticate(email: string, observeResponse: boolean = false, relativeRoute: string = ''): Observable<any> {\n    const url = this.url + `/authentication`;\n    const data = {'email': email};\n    if (relativeRoute) {\n      data['relativeRoute'] = relativeRoute;\n    }\n    return this.httpHelper.customCall(HttpMethodTypes.put, url, data, null, observeResponse);\n  }\n\n  signinGetToken(encryptedBrainKey, stringToSign, code, password) {\n    const brainKeyData = KeyPair.decryptBrainKeyByPassword(encryptedBrainKey, password);\n\n    if (!brainKeyData.isValid) {\n      return throwError('oauth_decrypt_brain_key');\n    }\n\n    const brainKey = brainKeyData.brainKey;\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    const url = this.url + `/signin/get-token`;\n    this.brainKey = brainKey.trim();\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      code: code,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  recoverAuthenticate(brainKey: string): Observable<{ stringToSign: any }> {\n    const keyPair = new KeyPair(brainKey.trim());\n    const publicKey = keyPair.PpublicKey;\n    const url = this.url + `/recover/authenticate/${publicKey}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  recoverComplete(brainKey: string, stringToSign: number, password: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + '/recover/complete';\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  getSignedData(brainKey: string, actionObj) {\n    const now = new Date(); // 1554369066000\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: actionObj\n    });\n    return {\n      signedJson: JSON.stringify(transactionObj.toJson()),\n      signedString: keyPair.signMessage(JSON.stringify(transactionObj.toJson())),\n      creation: Math.floor(now.getTime() / 1000),\n      expiry: Math.floor(now_1h.getTime() / 1000),\n    };\n  }\n\n  getSignedEmptyObject(brainKey: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedData = this.getSignedData(brainKey.trim(), {});\n    return {\n      publicKey: keyPair.PpublicKey,\n      signedString: signedData.signedString,\n      creationDate: signedData.creation\n    };\n  }\n\n  setBrainKeySeen(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-seen';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        return data;\n      }));\n  }\n\n  setBrainKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        this.brainKeySaved = true;\n        return data;\n      }));\n  }\n\n  setPrivateKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/private-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.privateKeySaved = true;\n        return data;\n      }));\n  }\n\n  generateRandomKey () {\n    Fingerprint2.get({}, (components) => {\n      const fingerprint = Fingerprint2.x64hash128(components.map(function (component) { return component.value; }).join(''), 31).trim();\n      const currentTime = new Date().getTime();\n\n      const averageHash = `${fingerprint}${currentTime}`;\n      const encodedAverageHash = stringToSha256(averageHash).substring(0, 8);\n\n      this.randomKey = parseInt(encodedAverageHash, 16);\n      KeyPair.setRandomKey(this.randomKey);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpObserverService {\n\n  constructor() { }\n\n  observerCall(name: string, request, refresh: boolean = false): Observable<any> {\n    return (!refresh && this.hasOwnProperty(name)) ? of(this[name]) : request.pipe(map(data => { this[name] = data; return data; }));\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { HelperLibComponent } from './helper-lib.component';\nimport { OauthService } from './services/oauth.service';\nimport { HttpHelperService } from './services/http-helper.service';\nimport { HttpObserverService } from './services/http-observer.service';\n\n@NgModule({\n  declarations: [\n    HelperLibComponent\n  ],\n  imports: [\n  ],\n  providers: [\n    OauthService,\n    HttpHelperService,\n    HttpObserverService\n  ],\n  exports: [\n    HelperLibComponent\n  ]\n})\nexport class HelperLibModule { }\n"],"names":["Injectable","Component","HttpHeaders","HttpClient","KeyPair","throwError","map","Fingerprint2.get","Fingerprint2.x64hash128","stringToSha256","Inject","of","NgModule"],"mappings":";;;;;;;;;;;;AAAA;QAOE;SAAiB;;oBALlBA,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;+BAJD;KAEA;;;;;;ACFA;QAaE;SAAiB;;;;QAEjB,qCAAQ;;;QAAR;SACC;;oBAdFC,cAAS,SAAC;wBACT,QAAQ,EAAE,mBAAmB;wBAC7B,QAAQ,EAAE,kDAIT;qBAEF;;;;QAQD,yBAAC;KAhBD;;;;;;ICFA;;QAKE,KAAM,KAAK;QACX,MAAO,MAAM;QACb,KAAM,KAAK;QACX,QAAS,QAAQ;;;QAcjB,2BAAoB,IAAgB;YAAhB,SAAI,GAAJ,IAAI,CAAY;SACnC;;;;;QALM,gCAAc;;;;QAArB,UAAsB,aAAoE;YACxF,iBAAiB,CAAC,WAAW,GAAG,aAAa,CAAC;SAC/C;;;;;;;;;QAKM,sCAAU;;;;;;;;QAAjB,UACE,MAAuB,EACvB,GAAW,EACX,IAAa,EACb,OAA0C,EAC1C,eAAgC;YAAhC,gCAAA,EAAA,uBAAgC;YAEhC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;SACtE;;;;;;;;;;QAEM,gCAAI;;;;;;;;;QAAX,UACE,MAAuB,EACvB,GAAW,EACX,IAAa,EACb,OAA0C,EAC1C,eAAgC,EAChC,cAA8B;YAD9B,gCAAA,EAAA,uBAAgC;YAChC,+BAAA,EAAA,qBAA8B;;gBAExB,QAAQ,GAAG,EAAE;YAEnB,IAAI,cAAc,IAAI,iBAAiB,CAAC,WAAW,EAAE;gBACnD,iBAAiB,CAAC,WAAW,CAAC,OAAO;;;;gBAAC,UAAA,YAAY;oBAChD,IAAI,YAAY,CAAC,cAAc,EAAE,EAAE;wBACjC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;qBAClE;iBACF,EAAC,CAAC;aACJ;YAED,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,OAAO;;;;gBAAC,UAAA,YAAY;oBAC1B,IAAI,YAAY,CAAC,KAAK,EAAE;wBACtB,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC;qBACjD;iBACF,EAAC,CAAC;aACJ;;gBAEK,OAAO,GAAG,EAAE;YAClB,IAAI,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE;;oBACtC,WAAW,GAAG,IAAIC,gBAAW,CAAC,QAAQ,CAAC;gBAC7C,OAAO,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;aAClC;YAED,IAAI,eAAe,EAAE;gBACnB,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;aACjC;YAED,IAAI,MAAM,KAAK,eAAe,CAAC,GAAG,IAAI,MAAM,KAAK,eAAe,CAAC,MAAM,EAAE;gBACvE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aACxC;iBAAM;gBACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;aAC9C;SACF;QA5DM,6BAAW,GAAG,EAAE,CAAC;;oBALzBF,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBAZQG,eAAU;;;gCADnB;KAWA;;;;;;ACXA;QAyBE,sBACU,UAA6B,EACjB,GAAW;YADvB,eAAU,GAAV,UAAU,CAAmB;YAGrC,IAAI,CAAC,GAAG,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACrD;YAED,IAAI,CAAC,GAAG,GAAM,GAAG,cAAW,CAAC;YAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;;;;;;;QAEc,4BAAe;;;;;;QAA9B,UAA+B,YAAY,EAAE,QAAQ;;gBAC7C,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;;gBAC7C,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;;gBACzD,OAAO,GAAG,IAAIC,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,cAAc,GAAG,IAAI,iBAAiB,CAAC;gBAC3C,QAAQ,EAAE,CAAC,GAAG;gBACd,MAAM,EAAE,CAAC,MAAM;gBACf,GAAG,EAAE;oBACH,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC;iBACZ;gBACD,MAAM,EAAE,EAAE;aACX,CAAC;YAEF,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;SACrE;;;;;QAED,yCAAkB;;;;QAAlB,UAAmB,IAAY;;gBACvB,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,0BAAwB,IAAM,CAAA;YACrD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAE7D;;;;;;;QAED,qCAAc;;;;;;QAAd,UAAe,YAAY,EAAE,IAAI,EAAE,QAAQ;;gBACnC,OAAO,GAAG,IAAIA,sBAAO,EAAE;;gBACvB,iBAAiB,GAAG,OAAO,CAAC,8BAA8B,CAAC,QAAQ,CAAC;;gBACpE,SAAS,GAAG,OAAO,CAAC,UAAU;;gBAC9B,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;YACjF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;gBAE3B,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kBAAkB;YAEzC,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC3D,gBAAgB,EAAE,IAAI;gBACtB,QAAQ,EAAE,iBAAiB;gBAC3B,SAAS,EAAE,SAAS;gBACpB,YAAY,EAAE,YAAY;aAC3B,CAAC,CAAC;SACJ;;;;;QAED,sCAAe;;;;QAAf,UAAgB,IAAY;;gBACpB,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,wBAAsB,IAAM,CAAA;YACnD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7D;;;;;;;QAED,mCAAY;;;;;;QAAZ,UAAa,KAAa,EAAE,eAAgC,EAAE,aAA0B;YAA5D,gCAAA,EAAA,uBAAgC;YAAE,8BAAA,EAAA,kBAA0B;;gBAChF,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,iBAAiB;;gBAClC,IAAI,GAAG,EAAC,OAAO,EAAE,KAAK,EAAC;YAC7B,IAAI,aAAa,EAAE;gBACjB,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;aACvC;YACD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;SAC1F;;;;;;;;QAED,qCAAc;;;;;;;QAAd,UAAe,iBAAiB,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ;YAA9D,iBAwBC;;gBAvBO,YAAY,GAAGA,sBAAO,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,QAAQ,CAAC;YAEnF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;gBACzB,OAAOC,eAAU,CAAC,yBAAyB,CAAC,CAAC;aAC9C;;gBAEK,QAAQ,GAAG,YAAY,CAAC,QAAQ;;gBAChC,OAAO,GAAG,IAAID,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;;gBAC3E,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mBAAmB;YAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC3D,IAAI,EAAE,IAAI;gBACV,YAAY,EAAE,YAAY;aAC3B,CAAC;iBACC,IAAI,CACHE,aAAG;;;;YAAC,UAAC,IAAS;gBACZ,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC;gBACvD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,KAAK,CAAC;gBACrD,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,KAAK,CAAC;gBAC3D,OAAO,IAAI,CAAC;aACb,EAAC,CACH,CAAC;SACL;;;;;QAED,0CAAmB;;;;QAAnB,UAAoB,QAAgB;;gBAC5B,OAAO,GAAG,IAAIF,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,SAAS,GAAG,OAAO,CAAC,UAAU;;gBAC9B,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,2BAAyB,SAAW,CAAA;YAC3D,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SAC7D;;;;;;;QAED,sCAAe;;;;;;QAAf,UAAgB,QAAgB,EAAE,YAAoB,EAAE,QAAgB;YAAxE,iBAsBC;;gBArBO,OAAO,GAAG,IAAIA,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,iBAAiB,GAAG,OAAO,CAAC,8BAA8B,CAAC,QAAQ,CAAC;;gBACpE,SAAS,GAAG,OAAO,CAAC,UAAU;;gBAC9B,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;YACjF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;gBAE3B,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mBAAmB;YAE1C,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;gBAC3D,QAAQ,EAAE,iBAAiB;gBAC3B,SAAS,EAAE,SAAS;gBACpB,YAAY,EAAE,YAAY;aAC3B,CAAC;iBACC,IAAI,CACHE,aAAG;;;;YAAC,UAAC,IAAS;gBACZ,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC;gBACvD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,KAAK,CAAC;gBACrD,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,KAAK,CAAC;gBAC3D,OAAO,IAAI,CAAC;aACb,EAAC,CACH,CAAC;SACL;;;;;;QAED,oCAAa;;;;;QAAb,UAAc,QAAgB,EAAE,SAAS;;gBACjC,GAAG,GAAG,IAAI,IAAI,EAAE;;;gBAChB,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;;gBACzD,OAAO,GAAG,IAAIF,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,cAAc,GAAG,IAAI,iBAAiB,CAAC;gBAC3C,QAAQ,EAAE,CAAC,GAAG;gBACd,MAAM,EAAE,CAAC,MAAM;gBACf,GAAG,EAAE;oBACH,KAAK,EAAE,CAAC;oBACR,QAAQ,EAAE,CAAC;iBACZ;gBACD,MAAM,EAAE,SAAS;aAClB,CAAC;YACF,OAAO;gBACL,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;gBACnD,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;gBAC1E,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;gBAC1C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;aAC5C,CAAC;SACH;;;;;QAED,2CAAoB;;;;QAApB,UAAqB,QAAgB;;gBAC7B,OAAO,GAAG,IAAIA,sBAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;gBACtC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAC1D,OAAO;gBACL,SAAS,EAAE,OAAO,CAAC,UAAU;gBAC7B,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,YAAY,EAAE,UAAU,CAAC,QAAQ;aAClC,CAAC;SACH;;;;;QAED,sCAAe;;;;QAAf,UAAgB,QAAgB;YAAhC,iBAQC;;gBAPO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,iBAAiB;;gBAClC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;iBAChF,IAAI,CAACE,aAAG;;;;YAAC,UAAA,IAAI;gBACZ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,OAAO,IAAI,CAAC;aACb,EAAC,CAAC,CAAC;SACP;;;;;QAED,uCAAgB;;;;QAAhB,UAAiB,QAAgB;YAAjC,iBASC;;gBARO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kBAAkB;;gBACnC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;iBAChF,IAAI,CAACA,aAAG;;;;YAAC,UAAA,IAAI;gBACZ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBACzB,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,OAAO,IAAI,CAAC;aACb,EAAC,CAAC,CAAC;SACP;;;;;QAED,yCAAkB;;;;QAAlB,UAAmB,QAAgB;YAAnC,iBAQC;;gBAPO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,oBAAoB;;gBACrC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;iBAChF,IAAI,CAACA,aAAG;;;;YAAC,UAAA,IAAI;gBACZ,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,OAAO,IAAI,CAAC;aACb,EAAC,CAAC,CAAC;SACP;;;;QAED,wCAAiB;;;QAAjB;YAAA,iBAWC;YAVCC,kBAAgB,CAAC,EAAE;;;;YAAE,UAAC,UAAU;;oBACxB,WAAW,GAAGC,yBAAuB,CAAC,UAAU,CAAC,GAAG;;;;gBAAC,UAAU,SAAS,IAAI,OAAO,SAAS,CAAC,KAAK,CAAC,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;;oBAC3H,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;;oBAElC,WAAW,GAAG,KAAG,WAAW,GAAG,WAAa;;oBAC5C,kBAAkB,GAAGC,oBAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;gBAEtE,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;gBAClDL,sBAAO,CAAC,YAAY,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;aACtC,EAAC,CAAC;SACJ;QA9MM,sBAAS,GAAW,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;oBAL3CJ,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;oBALQ,iBAAiB;iDAoBrBU,WAAM,SAAC,UAAU;;;2BA3BtB;KAUA;;;;;;ACVA;QASE;SAAiB;;;;;;;QAEjB,0CAAY;;;;;;QAAZ,UAAa,IAAY,EAAE,OAAO,EAAE,OAAwB;YAA5D,iBAEC;YAFmC,wBAAA,EAAA,eAAwB;YAC1D,OAAO,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAIC,OAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAACL,aAAG;;;;YAAC,UAAA,IAAI,IAAM,KAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC;SAClI;;oBATFN,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;kCAND;KAIA;;;;;;ACJA;QAMA;SAegC;;oBAf/BY,aAAQ,SAAC;wBACR,YAAY,EAAE;4BACZ,kBAAkB;yBACnB;wBACD,OAAO,EAAE,EACR;wBACD,SAAS,EAAE;4BACT,YAAY;4BACZ,iBAAiB;4BACjB,mBAAmB;yBACpB;wBACD,OAAO,EAAE;4BACP,kBAAkB;yBACnB;qBACF;;QAC8B,sBAAC;KAfhC;;;;;;;;;;;;;;;;;;"}