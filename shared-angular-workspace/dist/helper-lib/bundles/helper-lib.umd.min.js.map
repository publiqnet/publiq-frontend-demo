{"version":3,"sources":["ng://helper-lib/lib/helper-lib.service.ts","ng://helper-lib/lib/helper-lib.component.ts","ng://helper-lib/lib/services/http-helper.service.ts","ng://helper-lib/lib/services/oauth.service.ts","ng://helper-lib/lib/services/http-observer.service.ts","ng://helper-lib/lib/helper-lib.module.ts"],"names":["HelperLibService","Injectable","args","providedIn","HelperLibComponent","prototype","ngOnInit","Component","selector","template","get","post","put","delete","HttpHelperService","http","this","setBaseHeaders","headerConfigs","baseHeaders","customCall","method","url","data","headers","observeResponse","call","useBaseHeaders","_headers","forEach","headerConfig","getHeaderValue","headerKay","value","key","options","Object","keys","length","headersData","HttpHeaders","HttpMethodTypes","HttpClient","OauthService","httpHelper","Error","generateRandomKey","getSignetString","stringToSign","brainKey","now","Date","now_1h","getTime","DATA_RANG","keyPair","KeyPair","trim","transactionObj","PubliqTransaction","creation","expiry","fee","whole","fraction","action","signMessage","JSON","stringify","toJson","signupConfirmation","code","signupComplete","password","encryptedBrainKey","getEncryptedBrainKeyByPassword","publicKey","PpublicKey","signedString","BrainKey","confirmationCode","signinCheckCode","authenticate","email","relativeRoute","signinGetToken","_this","brainKeyData","decryptBrainKeyByPassword","isValid","throwError","pipe","map","brainKeySaved","brainKeySeen","privateKeySaved","recoverAuthenticate","recoverComplete","getSignedData","actionObj","signedJson","Math","floor","getSignedEmptyObject","signedData","creationDate","setBrainKeySeen","signedEmptyObjectData","setBrainKeySaved","setPrivateKeySaved","Fingerprint2.get","components","averageHash","Fingerprint2.x64hash128","component","join","encodedAverageHash","stringToSha256","substring","randomKey","parseInt","setRandomKey","Inject","HttpObserverService","observerCall","name","request","refresh","hasOwnProperty","of","HelperLibModule","NgModule","declarations","imports","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'helper-helper-lib',\n  template: `\n    <p>\n      helper-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class HelperLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport enum HttpMethodTypes {\n  get = 'get',\n  post = 'post',\n  put = 'put',\n  delete = 'delete'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpHelperService {\n\n  static baseHeaders = [];\n\n  static setBaseHeaders(headerConfigs: { headerKay: string, getHeaderValue: () => string }[]) {\n    HttpHelperService.baseHeaders = headerConfigs;\n  }\n\n  constructor(private http: HttpClient) {\n  }\n\n  public customCall(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false\n  ) {\n    return this.call(method, url, data, headers, observeResponse, false);\n  }\n\n  public call(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false,\n    useBaseHeaders: boolean = true\n  ): Observable<any> {\n    const _headers = {};\n\n    if (useBaseHeaders && HttpHelperService.baseHeaders) {\n      HttpHelperService.baseHeaders.forEach(headerConfig => {\n        if (headerConfig.getHeaderValue()) {\n          _headers[headerConfig.headerKay] = headerConfig.getHeaderValue();\n        }\n      });\n    }\n\n    if (headers) {\n      headers.forEach(headerConfig => {\n        if (headerConfig.value) {\n          _headers[headerConfig.key] = headerConfig.value;\n        }\n      });\n    }\n\n    const options = {};\n    if (_headers && Object.keys(_headers).length) {\n      const headersData = new HttpHeaders(_headers);\n      options['headers'] = headersData;\n    }\n\n    if (observeResponse) {\n      options['observe'] = 'response';\n    }\n\n    if (method === HttpMethodTypes.get || method === HttpMethodTypes.delete) {\n      return this.http[method](url, options);\n    } else {\n      return this.http[method](url, data, options);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport * as Fingerprint2 from 'fingerprintjs2';\n\nimport { KeyPair } from 'cryptography-ts';\nimport { stringToSha256 } from 'cryptography-ts/bin/utils';\nimport PubliqTransaction from 'publiq-models-ts/bin/models/PubliqTransaction';\nimport { HttpHelperService, HttpMethodTypes } from './http-helper.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthService {\n\n  static DATA_RANG: number = 60 * 60 * 1000;\n\n  public brainKey: string;\n  private url: string;\n  private randomKey: number;\n\n  public brainKeySaved: boolean;\n  public brainKeySeen: boolean;\n  public privateKeySaved: boolean;\n\n  constructor(\n    private httpHelper: HttpHelperService,\n    @Inject('oauthUrl') url: string\n  ) {\n    if (!url) {\n      throw new Error('OauthService: oauthUrl not valid');\n    }\n\n    this.url = `${url}/api/user`;\n    this.generateRandomKey();\n  }\n\n  private static getSignetString(stringToSign, brainKey) {\n    const now = new Date(new Date(stringToSign * 1000));\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: {},\n    });\n\n    return keyPair.signMessage(JSON.stringify(transactionObj.toJson()));\n  }\n\n  signupConfirmation(code: string): Observable<{ stringToSign: number }> {\n    const url = this.url + `/signup/confirmation/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n\n  }\n\n  signupComplete(stringToSign, code, password) {\n    const keyPair = new KeyPair();\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + `/signup/complete`;\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      confirmationCode: code,\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    });\n  }\n\n  signinCheckCode(code: string): Observable<any> {\n    const url = this.url + `/signin/check-code/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  authenticate(email: string, observeResponse: boolean = false, relativeRoute: string = ''): Observable<any> {\n    const url = this.url + `/authentication`;\n    const data = {'email': email};\n    if (relativeRoute) {\n      data['relativeRoute'] = relativeRoute;\n    }\n    return this.httpHelper.customCall(HttpMethodTypes.put, url, data, null, observeResponse);\n  }\n\n  signinGetToken(encryptedBrainKey, stringToSign, code, password) {\n    const brainKeyData = KeyPair.decryptBrainKeyByPassword(encryptedBrainKey, password);\n\n    if (!brainKeyData.isValid) {\n      return throwError('oauth_decrypt_brain_key');\n    }\n\n    const brainKey = brainKeyData.brainKey;\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    const url = this.url + `/signin/get-token`;\n    this.brainKey = brainKey.trim();\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      code: code,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  recoverAuthenticate(brainKey: string): Observable<{ stringToSign: any }> {\n    const keyPair = new KeyPair(brainKey.trim());\n    const publicKey = keyPair.PpublicKey;\n    const url = this.url + `/recover/authenticate/${publicKey}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  recoverComplete(brainKey: string, stringToSign: number, password: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + '/recover/complete';\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  getSignedData(brainKey: string, actionObj) {\n    const now = new Date(); // 1554369066000\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: actionObj\n    });\n    return {\n      signedJson: JSON.stringify(transactionObj.toJson()),\n      signedString: keyPair.signMessage(JSON.stringify(transactionObj.toJson())),\n      creation: Math.floor(now.getTime() / 1000),\n      expiry: Math.floor(now_1h.getTime() / 1000),\n    };\n  }\n\n  getSignedEmptyObject(brainKey: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedData = this.getSignedData(brainKey.trim(), {});\n    return {\n      publicKey: keyPair.PpublicKey,\n      signedString: signedData.signedString,\n      creationDate: signedData.creation\n    };\n  }\n\n  setBrainKeySeen(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-seen';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        return data;\n      }));\n  }\n\n  setBrainKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        this.brainKeySaved = true;\n        return data;\n      }));\n  }\n\n  setPrivateKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/private-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.privateKeySaved = true;\n        return data;\n      }));\n  }\n\n  generateRandomKey () {\n    Fingerprint2.get({}, (components) => {\n      const fingerprint = Fingerprint2.x64hash128(components.map(function (component) { return component.value; }).join(''), 31).trim();\n      const currentTime = new Date().getTime();\n\n      const averageHash = `${fingerprint}${currentTime}`;\n      const encodedAverageHash = stringToSha256(averageHash).substring(0, 8);\n\n      this.randomKey = parseInt(encodedAverageHash, 16);\n      KeyPair.setRandomKey(this.randomKey);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpObserverService {\n\n  constructor() { }\n\n  observerCall(name: string, request, refresh: boolean = false): Observable<any> {\n    return (!refresh && this.hasOwnProperty(name)) ? of(this[name]) : request.pipe(map(data => { this[name] = data; return data; }));\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { HelperLibComponent } from './helper-lib.component';\nimport { OauthService } from './services/oauth.service';\nimport { HttpHelperService } from './services/http-helper.service';\nimport { HttpObserverService } from './services/http-observer.service';\n\n@NgModule({\n  declarations: [\n    HelperLibComponent\n  ],\n  imports: [\n  ],\n  providers: [\n    OauthService,\n    HttpHelperService,\n    HttpObserverService\n  ],\n  exports: [\n    HelperLibComponent\n  ]\n})\nexport class HelperLibModule { }\n"]}