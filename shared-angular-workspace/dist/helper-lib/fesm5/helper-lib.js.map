{"version":3,"file":"helper-lib.js","sources":["ng://helper-lib/lib/helper-lib.service.ts","ng://helper-lib/lib/helper-lib.component.ts","ng://helper-lib/lib/services/http-helper.service.ts","ng://helper-lib/lib/services/oauth.service.ts","ng://helper-lib/lib/services/http-observer.service.ts","ng://helper-lib/lib/helper-lib.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HelperLibService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'helper-helper-lib',\n  template: `\n    <p>\n      helper-lib works!\n    </p>\n  `,\n  styles: []\n})\nexport class HelperLibComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport enum HttpMethodTypes {\n  get = 'get',\n  post = 'post',\n  put = 'put',\n  delete = 'delete'\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpHelperService {\n\n  static baseHeaders = [];\n\n  static setBaseHeaders(headerConfigs: { headerKay: string, getHeaderValue: () => string }[]) {\n    HttpHelperService.baseHeaders = headerConfigs;\n  }\n\n  constructor(private http: HttpClient) {\n  }\n\n  public customCall(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false\n  ) {\n    return this.call(method, url, data, headers, observeResponse, false);\n  }\n\n  public call(\n    method: HttpMethodTypes,\n    url: string,\n    data?: object,\n    headers?: { key: string; value: string }[],\n    observeResponse: boolean = false,\n    useBaseHeaders: boolean = true\n  ): Observable<any> {\n    const _headers = {};\n\n    if (useBaseHeaders && HttpHelperService.baseHeaders) {\n      HttpHelperService.baseHeaders.forEach(headerConfig => {\n        if (headerConfig.getHeaderValue()) {\n          _headers[headerConfig.headerKay] = headerConfig.getHeaderValue();\n        }\n      });\n    }\n\n    if (headers) {\n      headers.forEach(headerConfig => {\n        if (headerConfig.value) {\n          _headers[headerConfig.key] = headerConfig.value;\n        }\n      });\n    }\n\n    const options = {};\n    if (_headers && Object.keys(_headers).length) {\n      const headersData = new HttpHeaders(_headers);\n      options['headers'] = headersData;\n    }\n\n    if (observeResponse) {\n      options['observe'] = 'response';\n    }\n\n    if (method === HttpMethodTypes.get || method === HttpMethodTypes.delete) {\n      return this.http[method](url, options);\n    } else {\n      return this.http[method](url, data, options);\n    }\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport * as Fingerprint2 from 'fingerprintjs2';\n\nimport { KeyPair } from 'cryptography-ts';\nimport { stringToSha256 } from 'cryptography-ts/bin/utils';\nimport PubliqTransaction from 'publiq-models-ts/bin/models/PubliqTransaction';\nimport { HttpHelperService, HttpMethodTypes } from './http-helper.service';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OauthService {\n\n  static DATA_RANG: number = 60 * 60 * 1000;\n\n  public brainKey: string;\n  private url: string;\n  private randomKey: number;\n\n  public brainKeySaved: boolean;\n  public brainKeySeen: boolean;\n  public privateKeySaved: boolean;\n\n  constructor(\n    private httpHelper: HttpHelperService,\n    @Inject('oauthUrl') url: string\n  ) {\n    if (!url) {\n      throw new Error('OauthService: oauthUrl not valid');\n    }\n\n    this.url = `${url}/api/user`;\n    this.generateRandomKey();\n  }\n\n  private static getSignetString(stringToSign, brainKey) {\n    const now = new Date(new Date(stringToSign * 1000));\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: {},\n    });\n\n    return keyPair.signMessage(JSON.stringify(transactionObj.toJson()));\n  }\n\n  signupConfirmation(code: string): Observable<{ stringToSign: number }> {\n    const url = this.url + `/signup/confirmation/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n\n  }\n\n  signupComplete(stringToSign, code, password) {\n    KeyPair.setRandomKey(this.randomKey);\n    const keyPair = new KeyPair();\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + `/signup/complete`;\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      confirmationCode: code,\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    });\n  }\n\n  signinCheckCode(code: string): Observable<any> {\n    const url = this.url + `/signin/check-code/${code}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  authenticate(email: string, observeResponse: boolean = false, relativeRoute: string = ''): Observable<any> {\n    const url = this.url + `/authentication`;\n    const data = {'email': email};\n    if (relativeRoute) {\n      data['relativeRoute'] = relativeRoute;\n    }\n    return this.httpHelper.customCall(HttpMethodTypes.put, url, data, null, observeResponse);\n  }\n\n  signinGetToken(encryptedBrainKey, stringToSign, code, password) {\n    const brainKeyData = KeyPair.decryptBrainKeyByPassword(encryptedBrainKey, password);\n\n    if (!brainKeyData.isValid) {\n      return throwError('oauth_decrypt_brain_key');\n    }\n\n    const brainKey = brainKeyData.brainKey;\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    const url = this.url + `/signin/get-token`;\n    this.brainKey = brainKey.trim();\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      code: code,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  recoverAuthenticate(brainKey: string): Observable<{ stringToSign: any }> {\n    const keyPair = new KeyPair(brainKey.trim());\n    const publicKey = keyPair.PpublicKey;\n    const url = this.url + `/recover/authenticate/${publicKey}`;\n    return this.httpHelper.customCall(HttpMethodTypes.get, url);\n  }\n\n  recoverComplete(brainKey: string, stringToSign: number, password: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const encryptedBrainKey = keyPair.getEncryptedBrainKeyByPassword(password);\n    const publicKey = keyPair.PpublicKey;\n    const signedString = OauthService.getSignetString(stringToSign, keyPair.BrainKey);\n    this.brainKey = keyPair.BrainKey;\n\n    const url = this.url + '/recover/complete';\n\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, {\n      brainKey: encryptedBrainKey,\n      publicKey: publicKey,\n      signedString: signedString\n    })\n      .pipe(\n        map((data: any) => {\n          this.brainKeySaved = data.brainKeySaved ? true : false;\n          this.brainKeySeen = data.brainKeySeen ? true : false;\n          this.privateKeySaved = data.privateKeySaved ? true : false;\n          return data;\n        })\n      );\n  }\n\n  getSignedData(brainKey: string, actionObj) {\n    const now = new Date(); // 1554369066000\n    const now_1h = new Date(now.getTime() + OauthService.DATA_RANG);\n    const keyPair = new KeyPair(brainKey.trim());\n    const transactionObj = new PubliqTransaction({\n      creation: +now,\n      expiry: +now_1h,\n      fee: {\n        whole: 0,\n        fraction: 0\n      },\n      action: actionObj\n    });\n    return {\n      signedJson: JSON.stringify(transactionObj.toJson()),\n      signedString: keyPair.signMessage(JSON.stringify(transactionObj.toJson())),\n      creation: Math.floor(now.getTime() / 1000),\n      expiry: Math.floor(now_1h.getTime() / 1000),\n    };\n  }\n\n  getSignedEmptyObject(brainKey: string) {\n    const keyPair = new KeyPair(brainKey.trim());\n    const signedData = this.getSignedData(brainKey.trim(), {});\n    return {\n      publicKey: keyPair.PpublicKey,\n      signedString: signedData.signedString,\n      creationDate: signedData.creation\n    };\n  }\n\n  setBrainKeySeen(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-seen';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        return data;\n      }));\n  }\n\n  setBrainKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/brain-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.brainKeySeen = true;\n        this.brainKeySaved = true;\n        return data;\n      }));\n  }\n\n  setPrivateKeySaved(brainKey: string): Observable<any> {\n    const url = this.url + '/private-key-saved';\n    const signedEmptyObjectData = this.getSignedEmptyObject(brainKey.trim());\n    return this.httpHelper.customCall(HttpMethodTypes.post, url, signedEmptyObjectData)\n      .pipe(map(data => {\n        this.privateKeySaved = true;\n        return data;\n      }));\n  }\n\n  generateRandomKey () {\n    Fingerprint2.get({}, (components) => {\n      const fingerprint = Fingerprint2.x64hash128(components.map(function (component) { return component.value; }).join(''), 31).trim();\n      const currentTime = new Date().getTime();\n\n      const averageHash = `${fingerprint}${currentTime}`;\n      const encodedAverageHash = stringToSha256(averageHash).substring(0, 8);\n\n      this.randomKey = parseInt(encodedAverageHash, 16);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpObserverService {\n\n  constructor() { }\n\n  observerCall(name: string, request, refresh: boolean = false): Observable<any> {\n    return (!refresh && this.hasOwnProperty(name)) ? of(this[name]) : request.pipe(map(data => { this[name] = data; return data; }));\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { HelperLibComponent } from './helper-lib.component';\nimport { OauthService } from './services/oauth.service';\nimport { HttpHelperService } from './services/http-helper.service';\nimport { HttpObserverService } from './services/http-observer.service';\n\n@NgModule({\n  declarations: [\n    HelperLibComponent\n  ],\n  imports: [\n  ],\n  providers: [\n    OauthService,\n    HttpHelperService,\n    HttpObserverService\n  ],\n  exports: [\n    HelperLibComponent\n  ]\n})\nexport class HelperLibModule { }\n"],"names":["Fingerprint2.get","Fingerprint2.x64hash128"],"mappings":";;;;;;;;;;;;;AAAA;IAOE;KAAiB;;gBALlB,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;2BAJD;CAEA;;;;;;ACFA;IAaE;KAAiB;;;;IAEjB,qCAAQ;;;IAAR;KACC;;gBAdF,SAAS,SAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,kDAIT;iBAEF;;;;IAQD,yBAAC;CAhBD;;;;;;ACFA;;IAKE,KAAM,KAAK;IACX,MAAO,MAAM;IACb,KAAM,KAAK;IACX,QAAS,QAAQ;;;IAcjB,2BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;KACnC;;;;;IALM,gCAAc;;;;IAArB,UAAsB,aAAoE;QACxF,iBAAiB,CAAC,WAAW,GAAG,aAAa,CAAC;KAC/C;;;;;;;;;IAKM,sCAAU;;;;;;;;IAAjB,UACE,MAAuB,EACvB,GAAW,EACX,IAAa,EACb,OAA0C,EAC1C,eAAgC;QAAhC,gCAAA,EAAA,uBAAgC;QAEhC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;KACtE;;;;;;;;;;IAEM,gCAAI;;;;;;;;;IAAX,UACE,MAAuB,EACvB,GAAW,EACX,IAAa,EACb,OAA0C,EAC1C,eAAgC,EAChC,cAA8B;QAD9B,gCAAA,EAAA,uBAAgC;QAChC,+BAAA,EAAA,qBAA8B;;YAExB,QAAQ,GAAG,EAAE;QAEnB,IAAI,cAAc,IAAI,iBAAiB,CAAC,WAAW,EAAE;YACnD,iBAAiB,CAAC,WAAW,CAAC,OAAO;;;;YAAC,UAAA,YAAY;gBAChD,IAAI,YAAY,CAAC,cAAc,EAAE,EAAE;oBACjC,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;iBAClE;aACF,EAAC,CAAC;SACJ;QAED,IAAI,OAAO,EAAE;YACX,OAAO,CAAC,OAAO;;;;YAAC,UAAA,YAAY;gBAC1B,IAAI,YAAY,CAAC,KAAK,EAAE;oBACtB,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC;iBACjD;aACF,EAAC,CAAC;SACJ;;YAEK,OAAO,GAAG,EAAE;QAClB,IAAI,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE;;gBACtC,WAAW,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC;YAC7C,OAAO,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;SAClC;QAED,IAAI,eAAe,EAAE;YACnB,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;SACjC;QAED,IAAI,MAAM,KAAK,eAAe,CAAC,GAAG,IAAI,MAAM,KAAK,eAAe,CAAC,MAAM,EAAE;YACvE,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;SACxC;aAAM;YACL,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;SAC9C;KACF;IA5DM,6BAAW,GAAG,EAAE,CAAC;;gBALzB,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAZQ,UAAU;;;4BADnB;CAWA;;;;;;ACXA;IAyBE,sBACU,UAA6B,EACjB,GAAW;QADvB,eAAU,GAAV,UAAU,CAAmB;QAGrC,IAAI,CAAC,GAAG,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;SACrD;QAED,IAAI,CAAC,GAAG,GAAM,GAAG,cAAW,CAAC;QAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC1B;;;;;;;IAEc,4BAAe;;;;;;IAA9B,UAA+B,YAAY,EAAE,QAAQ;;YAC7C,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,CAAC;;YAC7C,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;;YACzD,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,cAAc,GAAG,IAAI,iBAAiB,CAAC;YAC3C,QAAQ,EAAE,CAAC,GAAG;YACd,MAAM,EAAE,CAAC,MAAM;YACf,GAAG,EAAE;gBACH,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;aACZ;YACD,MAAM,EAAE,EAAE;SACX,CAAC;QAEF,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;KACrE;;;;;IAED,yCAAkB;;;;IAAlB,UAAmB,IAAY;;YACvB,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,0BAAwB,IAAM,CAAA;QACrD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAE7D;;;;;;;IAED,qCAAc;;;;;;IAAd,UAAe,YAAY,EAAE,IAAI,EAAE,QAAQ;QACzC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;YAC/B,OAAO,GAAG,IAAI,OAAO,EAAE;;YACvB,iBAAiB,GAAG,OAAO,CAAC,8BAA8B,CAAC,QAAQ,CAAC;;YACpE,SAAS,GAAG,OAAO,CAAC,UAAU;;YAC9B,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;QACjF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;YAE3B,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kBAAkB;QAEzC,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;YAC3D,gBAAgB,EAAE,IAAI;YACtB,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE,SAAS;YACpB,YAAY,EAAE,YAAY;SAC3B,CAAC,CAAC;KACJ;;;;;IAED,sCAAe;;;;IAAf,UAAgB,IAAY;;YACpB,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,wBAAsB,IAAM,CAAA;QACnD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC7D;;;;;;;IAED,mCAAY;;;;;;IAAZ,UAAa,KAAa,EAAE,eAAgC,EAAE,aAA0B;QAA5D,gCAAA,EAAA,uBAAgC;QAAE,8BAAA,EAAA,kBAA0B;;YAChF,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,iBAAiB;;YAClC,IAAI,GAAG,EAAC,OAAO,EAAE,KAAK,EAAC;QAC7B,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,GAAG,aAAa,CAAC;SACvC;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;KAC1F;;;;;;;;IAED,qCAAc;;;;;;;IAAd,UAAe,iBAAiB,EAAE,YAAY,EAAE,IAAI,EAAE,QAAQ;QAA9D,iBAwBC;;YAvBO,YAAY,GAAG,OAAO,CAAC,yBAAyB,CAAC,iBAAiB,EAAE,QAAQ,CAAC;QAEnF,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;YACzB,OAAO,UAAU,CAAC,yBAAyB,CAAC,CAAC;SAC9C;;YAEK,QAAQ,GAAG,YAAY,CAAC,QAAQ;;YAChC,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;;YAC3E,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mBAAmB;QAC1C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;YAC3D,IAAI,EAAE,IAAI;YACV,YAAY,EAAE,YAAY;SAC3B,CAAC;aACC,IAAI,CACH,GAAG;;;;QAAC,UAAC,IAAS;YACZ,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC;YACvD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,KAAK,CAAC;YACrD,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,KAAK,CAAC;YAC3D,OAAO,IAAI,CAAC;SACb,EAAC,CACH,CAAC;KACL;;;;;IAED,0CAAmB;;;;IAAnB,UAAoB,QAAgB;;YAC5B,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,SAAS,GAAG,OAAO,CAAC,UAAU;;YAC9B,GAAG,GAAG,IAAI,CAAC,GAAG,IAAG,2BAAyB,SAAW,CAAA;QAC3D,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;KAC7D;;;;;;;IAED,sCAAe;;;;;;IAAf,UAAgB,QAAgB,EAAE,YAAoB,EAAE,QAAgB;QAAxE,iBAsBC;;YArBO,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,iBAAiB,GAAG,OAAO,CAAC,8BAA8B,CAAC,QAAQ,CAAC;;YACpE,SAAS,GAAG,OAAO,CAAC,UAAU;;YAC9B,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,YAAY,EAAE,OAAO,CAAC,QAAQ,CAAC;QACjF,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;YAE3B,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,mBAAmB;QAE1C,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE;YAC3D,QAAQ,EAAE,iBAAiB;YAC3B,SAAS,EAAE,SAAS;YACpB,YAAY,EAAE,YAAY;SAC3B,CAAC;aACC,IAAI,CACH,GAAG;;;;QAAC,UAAC,IAAS;YACZ,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,KAAK,CAAC;YACvD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,GAAG,KAAK,CAAC;YACrD,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,GAAG,IAAI,GAAG,KAAK,CAAC;YAC3D,OAAO,IAAI,CAAC;SACb,EAAC,CACH,CAAC;KACL;;;;;;IAED,oCAAa;;;;;IAAb,UAAc,QAAgB,EAAE,SAAS;;YACjC,GAAG,GAAG,IAAI,IAAI,EAAE;;;YAChB,MAAM,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC;;YACzD,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,cAAc,GAAG,IAAI,iBAAiB,CAAC;YAC3C,QAAQ,EAAE,CAAC,GAAG;YACd,MAAM,EAAE,CAAC,MAAM;YACf,GAAG,EAAE;gBACH,KAAK,EAAE,CAAC;gBACR,QAAQ,EAAE,CAAC;aACZ;YACD,MAAM,EAAE,SAAS;SAClB,CAAC;QACF,OAAO;YACL,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;YACnD,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC;YAC1E,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YAC1C,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;SAC5C,CAAC;KACH;;;;;IAED,2CAAoB;;;;IAApB,UAAqB,QAAgB;;YAC7B,OAAO,GAAG,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;;YACtC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;QAC1D,OAAO;YACL,SAAS,EAAE,OAAO,CAAC,UAAU;YAC7B,YAAY,EAAE,UAAU,CAAC,YAAY;YACrC,YAAY,EAAE,UAAU,CAAC,QAAQ;SAClC,CAAC;KACH;;;;;IAED,sCAAe;;;;IAAf,UAAgB,QAAgB;QAAhC,iBAQC;;YAPO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,iBAAiB;;YAClC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;aAChF,IAAI,CAAC,GAAG;;;;QAAC,UAAA,IAAI;YACZ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,OAAO,IAAI,CAAC;SACb,EAAC,CAAC,CAAC;KACP;;;;;IAED,uCAAgB;;;;IAAhB,UAAiB,QAAgB;QAAjC,iBASC;;YARO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,kBAAkB;;YACnC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;aAChF,IAAI,CAAC,GAAG;;;;QAAC,UAAA,IAAI;YACZ,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,KAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAC1B,OAAO,IAAI,CAAC;SACb,EAAC,CAAC,CAAC;KACP;;;;;IAED,yCAAkB;;;;IAAlB,UAAmB,QAAgB;QAAnC,iBAQC;;YAPO,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,oBAAoB;;YACrC,qBAAqB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,EAAE,GAAG,EAAE,qBAAqB,CAAC;aAChF,IAAI,CAAC,GAAG;;;;QAAC,UAAA,IAAI;YACZ,KAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,OAAO,IAAI,CAAC;SACb,EAAC,CAAC,CAAC;KACP;;;;IAED,wCAAiB;;;IAAjB;QAAA,iBAUC;QATCA,GAAgB,CAAC,EAAE;;;;QAAE,UAAC,UAAU;;gBACxB,WAAW,GAAGC,UAAuB,CAAC,UAAU,CAAC,GAAG;;;;YAAC,UAAU,SAAS,IAAI,OAAO,SAAS,CAAC,KAAK,CAAC,EAAE,EAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE;;gBAC3H,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;;gBAElC,WAAW,GAAG,KAAG,WAAW,GAAG,WAAa;;gBAC5C,kBAAkB,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;YAEtE,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;SACnD,EAAC,CAAC;KACJ;IA9MM,sBAAS,GAAW,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;;gBAL3C,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBALQ,iBAAiB;6CAoBrB,MAAM,SAAC,UAAU;;;uBA3BtB;CAUA;;;;;;ACVA;IASE;KAAiB;;;;;;;IAEjB,0CAAY;;;;;;IAAZ,UAAa,IAAY,EAAE,OAAO,EAAE,OAAwB;QAA5D,iBAEC;QAFmC,wBAAA,EAAA,eAAwB;QAC1D,OAAO,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG;;;;QAAC,UAAA,IAAI,IAAM,KAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,EAAE,EAAC,CAAC,CAAC;KAClI;;gBATF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;8BAND;CAIA;;;;;;ACJA;IAMA;KAegC;;gBAf/B,QAAQ,SAAC;oBACR,YAAY,EAAE;wBACZ,kBAAkB;qBACnB;oBACD,OAAO,EAAE,EACR;oBACD,SAAS,EAAE;wBACT,YAAY;wBACZ,iBAAiB;wBACjB,mBAAmB;qBACpB;oBACD,OAAO,EAAE;wBACP,kBAAkB;qBACnB;iBACF;;IAC8B,sBAAC;CAfhC;;;;"}